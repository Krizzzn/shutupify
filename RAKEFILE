require 'albacore'
require 'rake/clean'
$: << './'

require 'buildscripts/ChromeExtension'
require 'buildscripts/WindowsApplication'
require 'buildscripts/TestSuite'

FOLDERS = { :root   =>  File.dirname(__FILE__) + "/"}
FOLDERS[:build] =       FOLDERS[:root] + "build/"
FOLDERS[:binaries] =    FOLDERS[:root] + "lib/"
FOLDERS[:test] =        FOLDERS[:build]+ "test/"
FOLDERS[:test_data] =   FOLDERS[:test] + "data/"
FOLDERS[:chrome] =      FOLDERS[:build]+ "chrome/"


CLEAN.include(FOLDERS[:build] + "**")


desc "creates all directories necessary"
task :ensure_dirs do |t|
	identify t

	FOLDERS.each {|_,value|
		Dir.mkdir(value) unless Dir.exists?(value)
	}
end

desc "build the app, do the unit tests, build chrome extension"
task :build => ["win:as_release", :clean, "tests:run", "win:build_app", "win:clean_up", "chrome:pack"]

private

module FileListEnhancement
  def has?(*filenames)
  	filenames.map { |filename| self.any? {|file| file =~ /#{filename}$/i } }.all?
  end
end

def identify p1
	puts ""
	name = p1
	if p1.is_a? Rake::Task
		name = p1.name
	end
	puts "TASK: #{name.upcase}"
	puts "-" * 80
end

def ensure_filelist (*files)	
	if files.first.is_a? FileList
		out = files.first
	else
		out = FileList[files]
	end
	out.extend(FileListEnhancement)
	out
end

def copy_files_into_folder (target_dir, *files)

	existing = FileList[target_dir + "*"]
	existing.extend(FileListEnhancement)

	references = ensure_filelist files
	references.existing!
		
	references.to_ary.map {|file| 
			dll = /[^\\\/]+$/i.match(file)[0]
			[file, existing.has?(dll)]
		}
		.each{|file,exists| references.exclude file if exists }

	if references.length > 0
		puts "gathering reference dlls"
		cp references, target_dir 
	end
end

